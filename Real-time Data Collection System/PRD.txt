# 중량선별기 실시간 데이터 수집 시스템 PRD

한국어로 작성해주세요요

## Product Requirements Document v1.0

---

## 1. Executive Summary

### 1.1 프로젝트 개요

인테크 중량선별기(CHECKWEIGHER)의 기존 USB 데이터 수집 방식을 RS-485 기반 실시간 Wi-Fi 전송 시스템으로 전환하여, 측정 데이터를 실시간으로 Google 스프레드시트에 자동 업로드하는 IoT 시스템 구축

### 1.2 비즈니스 목표

- 실시간 생산 데이터 모니터링 실현
- 수동 USB 데이터 수집 과정 자동화
- 원격지에서 실시간 품질 관리 가능
- 데이터 손실 방지 및 백업 자동화

### 1.3 성공 지표

- 측정 후 3초 이내 스프레드시트 반영
- 99.9% 데이터 전송 성공률
- 24/7 무인 자동 운영
- 월 데이터 손실률 0.01% 이하

---

## 2. 시스템 아키텍처

### 2.1 전체 시스템 구성도

```
[중량선별기] ←RS-485→ [라즈베리파이] ←Wi-Fi→ [인터넷] → [Google Sheets]
    ↓                      ↓                              ↓
[기존 USB저장]         [로컬 백업]                    [실시간 모니터링]

```

### 2.2 데이터 흐름

1. 중량선별기에서 RS-485로 측정 데이터 전송
2. 라즈베리파이에서 데이터 수신 및 파싱
3. 로컬 백업 저장 (SQLite)
4. Wi-Fi를 통해 Google Sheets API로 실시간 전송
5. 전송 실패 시 재시도 로직 실행

---

## 3. 하드웨어 사양 및 주문 목록

### 3.1 라즈베리파이 모델 선택: **Raspberry Pi 4 Model B (4GB RAM)**

### 선택 근거

- **CPU**: ARM Cortex-A72 1.5GHz (산업용 연속 운영에 충분)
- **RAM**: 4GB (데이터 버퍼링 및 안정적 운영)
- **내장 Wi-Fi**: 802.11ac (안정적 무선 통신)
- **GPIO**: 40핀 (RS-485 연결용)
- **USB**: USB 3.0 지원 (추가 저장장치 연결)
- **전력**: 5V 3A (산업용 환경 적합)

### 3.2 구매 목록 (BOM - Bill of Materials)

### A. 필수 구매 품목

| 순번 | 품목                 | 사양                    | 수량  | 예상가격 | 구매처                      | 용도          |
| ---- | -------------------- | ----------------------- | ----- | -------- | --------------------------- | ------------- |
| 1    | Raspberry Pi 4B      | 4GB RAM                 | 1개   | 80,000원 | 로봇계 / 디바이스마트       | 메인 컨트롤러 |
| 2    | RS-485 to TTL 컨버터 | MAX485 칩셋             | 1개   | 8,000원  | 아이씨뱅큐 / 알리익스프레스 | 시리얼 통신   |
| 3    | MicroSD 카드         | Class 10, 64GB          | 1개   | 15,000원 | 온라인 쇼핑몰               | OS 저장       |
| 4    | 라즈베리파이 케이스  | 공식 케이스 또는 산업용 | 1개   | 12,000원 | 로봇계                      | 보호 케이스   |
| 5    | 전원 어댑터          | 5V 3A USB-C             | 1개   | 15,000원 | 로봇계                      | 전원 공급     |
| 6    | 점퍼 와이어          | 암수 혼합 40개          | 1세트 | 3,000원  | 디바이스마트                | 연결선        |
| 7    | 브레드보드           | 하프 사이즈             | 1개   | 2,000원  | 디바이스마트                | 회로 연결     |

### B. 추천 추가 품목

| 순번 | 품목         | 사양           | 수량  | 예상가격 | 용도        |
| ---- | ------------ | -------------- | ----- | -------- | ----------- |
| 8    | 방열판       | 라즈베리파이용 | 1세트 | 5,000원  | 온도 관리   |
| 9    | USB 저장장치 | 32GB           | 1개   | 10,000원 | 추가 백업   |
| 10   | 터미널 블록  | 3핀            | 2개   | 4,000원  | 안정적 연결 |
| 11   | 릴레이 모듈  | 5V             | 1개   | 6,000원  | 외부 제어용 |

**총 예상 비용: 160,000원 (필수) + 25,000원 (추가) = 185,000원**

### 3.3 구매 순서 및 타이밍

### 1주차: 하드웨어 주문

- **Day 1-2**: 라즈베리파이 4B, 전원, 케이스, SD카드 주문
- **Day 3-4**: RS-485 컨버터, 점퍼와이어, 브레드보드 주문
- **배송 기간**: 3-5일

### 2주차: 개발 환경 구축

- **Day 8-10**: 하드웨어 도착 후 라즈베리파이 OS 설치
- **Day 11-12**: RS-485 연결 테스트
- **Day 13-14**: 기본 통신 확인

---

## 4. 소프트웨어 기능 명세서

### 4.1 핵심 기능

### 4.1.1 데이터 수집 모듈

```python
# 기능: RS-485를 통한 실시간 데이터 수신
def collect_weight_data():
    # 시리얼 포트 연결 (GPIO 14, 15 UART)
    # 프로토콜: 9600bps, 8N1
    # 데이터 형식: 기존 USB와 동일
    return data_packet

```

**요구사항:**

- 24/7 연속 수신 가능
- 데이터 무결성 검증
- 통신 오류 시 재연결
- 초당 최대 10개 데이터 처리

### 4.1.2 데이터 파싱 모듈

```python
# 기능: 수신 데이터를 CSV 형식으로 변환
def parse_data(raw_data):
    # DATE,TIME,P_No,LOT,COUNT,GRADE,WEIGHT 형식
    # 타임스탬프 자동 생성
    # 데이터 검증 및 필터링
    return formatted_csv_row

```

### 4.1.3 실시간 전송 모듈

```python
# 기능: Google Sheets API를 통한 실시간 업로드
def upload_to_sheets(data):
    # Google Sheets API v4 사용
    # 배치 업로드 (5초마다 또는 10개씩)
    # 재시도 로직 (최대 3회)
    return upload_status

```

### 4.1.4 로컬 백업 모듈

```python
# 기능: SQLite 기반 로컬 데이터 저장
def backup_locally(data):
    # 네트워크 오류시 로컬 저장
    # 복구 시 자동 업로드
    # 로그 로테이션 (30일 보관)
    return backup_status

```

### 4.2 시스템 모니터링 기능

- Wi-Fi 연결 상태 모니터링
- 시리얼 통신 상태 확인
- 메모리 및 CPU 사용률 체크
- 자동 재시작 기능

---

## 5. 기술 스택

### 5.1 하드웨어

- **주제어기**: Raspberry Pi 4B (4GB)
- **통신**: RS-485 to TTL 컨버터
- **저장**: MicroSD 64GB + USB 백업
- **네트워크**: 내장 Wi-Fi 802.11ac

### 5.2 소프트웨어

### 운영체제

- **OS**: Raspberry Pi OS (64-bit)
- **Python**: 3.9+

### 주요 라이브러리

```bash
# 필수 설치 패키지
pip install pyserial          # RS-485 시리얼 통신
pip install google-auth       # Google API 인증
pip install google-auth-oauthlib
pip install google-api-python-client  # Google Sheets API
pip install pandas           # 데이터 처리
pip install sqlite3          # 로컬 데이터베이스
pip install requests         # HTTP 통신
pip install schedule         # 작업 스케줄링
pip install psutil          # 시스템 모니터링

```

### 디렉토리 구조

```
/home/pi/checkweigher/
├── main.py              # 메인 실행 파일
├── config/
│   ├── settings.json    # 설정 파일
│   └── credentials.json # Google API 인증
├── modules/
│   ├── serial_reader.py # RS-485 통신
│   ├── data_parser.py   # 데이터 파싱
│   ├── sheets_uploader.py # Google Sheets 업로드
│   └── local_backup.py  # 로컬 백업
├── logs/               # 로그 파일
├── backup/            # 로컬 백업 데이터
└── test/              # 테스트 코드

```

---

## 6. 연결 및 설치 가이드

### 6.1 하드웨어 연결 순서

### Step 1: RS-485 컨버터 연결 (3주차 진행)

```
중량선별기        RS-485 컨버터      라즈베리파이
485+ ────────── A+ (A)
485- ────────── B- (B)
GND  ────────── GND ──────────── GND (Pin 6)
                VCC ──────────── 5V (Pin 2)
                RXD ──────────── GPIO 14 (Pin 8)
                TXD ──────────── GPIO 15 (Pin 10)

```

### Step 2: 중량선별기 설정 확인

1. 중량선별기 메뉴에서 통신설정 진입
2. Ch.2 (RS-485) 포트 활성화
3. 통신속도: 9600bps 확인
4. 프로토콜: 리모트전송 또는 HM 프로토콜 선택

### Step 3: 테스트 연결

```bash
# 시리얼 포트 확인
ls /dev/tty*

# 통신 테스트
sudo minicom -D /dev/ttyAMA0 -b 9600

```

### 6.2 소프트웨어 설치 순서

### Phase 1: 기본 환경 설정 (2주차)

```bash
# 1. Raspberry Pi OS 업데이트
sudo apt update && sudo apt upgrade -y

# 2. Python 환경 설정
sudo apt install python3-pip python3-venv -y

# 3. 시리얼 통신 활성화
sudo raspi-config
# Interface Options > Serial Port > No (login shell) > Yes (serial interface)

# 4. 프로젝트 폴더 생성
mkdir ~/checkweigher && cd ~/checkweigher
python3 -m venv venv
source venv/bin/activate

```

### Phase 2: 라이브러리 설치 (3주차)

```bash
# requirements.txt 생성 후 설치
pip install -r requirements.txt

# Google API 인증 설정
# Google Cloud Console에서 서비스 계정 생성
# credentials.json 다운로드 및 저장

```

### Phase 3: 서비스 등록 (4주차)

```bash
# systemd 서비스 생성
sudo nano /etc/systemd/system/checkweigher.service

# 서비스 활성화
sudo systemctl enable checkweigher.service
sudo systemctl start checkweigher.service

```

---

## 7. Google Sheets 연동 설정

### 7.1 Google Cloud Console 설정

### Step 1: 프로젝트 생성 (온라인 작업)

1. [Google Cloud Console](https://console.cloud.google.com/) 접속
2. 새 프로젝트 생성: "checkweigher-system"
3. Google Sheets API 활성화
4. 서비스 계정 생성
5. JSON 키 파일 다운로드

### Step 2: 스프레드시트 생성

1. Google Sheets에서 새 시트 생성
2. 시트명: "중량선별기\_데이터"
3. 헤더 행 설정:

   ```
   A1: DATEB1: TIME  C1: P_NoD1: LOTE1: COUNTF1: GRADEG1: WEIGHT

   ```

### Step 3: 권한 설정

- 서비스 계정 이메일을 스프레드시트에 편집자로 추가
- 시트 ID 복사하여 설정 파일에 저장

### 7.2 API 코드 구현 예시

```python
# sheets_uploader.py
import gspread
from google.oauth2.service_account import Credentials

class SheetsUploader:
    def __init__(self):
        scope = ['https://spreadsheets.google.com/feeds',
                'https://www.googleapis.com/auth/drive']
        creds = Credentials.from_service_account_file(
            'config/credentials.json', scopes=scope)
        self.client = gspread.authorize(creds)
        self.sheet = self.client.open_by_key(SPREADSHEET_ID).sheet1

    def upload_data(self, data_row):
        try:
            self.sheet.append_row(data_row)
            return True
        except Exception as e:
            print(f"Upload failed: {e}")
            return False

```

---

## 8. 개발 일정

### Phase 1: 하드웨어 준비 (1-2주차)

| 일정  | 작업                   | 담당   | 완료 기준      |
| ----- | ---------------------- | ------ | -------------- |
| 1주차 | 하드웨어 주문 및 도착  | 구매팀 | 모든 부품 도착 |
| 2주차 | 라즈베리파이 기본 설정 | 개발팀 | OS 설치 완료   |

### Phase 2: 기본 통신 구현 (3-4주차)

| 일정  | 작업                  | 담당   | 완료 기준        |
| ----- | --------------------- | ------ | ---------------- |
| 3주차 | RS-485 연결 및 테스트 | 개발팀 | 데이터 수신 확인 |
| 4주차 | 데이터 파싱 모듈 개발 | 개발팀 | CSV 형식 변환    |

### Phase 3: 클라우드 연동 (5-6주차)

| 일정  | 작업                     | 담당   | 완료 기준        |
| ----- | ------------------------ | ------ | ---------------- |
| 5주차 | Google Sheets API 연동   | 개발팀 | 실시간 업로드    |
| 6주차 | 로컬 백업 및 재시도 로직 | 개발팀 | 장애 복구 테스트 |

### Phase 4: 테스트 및 배포 (7-8주차)

| 일정  | 작업                     | 담당   | 완료 기준            |
| ----- | ------------------------ | ------ | -------------------- |
| 7주차 | 통합 테스트 및 버그 수정 | 개발팀 | 24시간 안정성 테스트 |
| 8주차 | 현장 배포 및 모니터링    | 운영팀 | 실제 운영 환경 적용  |

---

## 9. 리스크 분석 및 대응 방안

### 9.1 기술적 리스크

### High Risk

| 리스크             | 확률 | 영향도 | 대응방안                     |
| ------------------ | ---- | ------ | ---------------------------- |
| RS-485 통신 불안정 | 30%  | High   | 프로토콜 다중화, 재연결 로직 |
| Wi-Fi 연결 끊김    | 40%  | Medium | 로컬 백업, 자동 재연결       |
| 중량선별기 호환성  | 20%  | High   | 사전 매뉴얼 분석, 테스트     |

### Medium Risk

| 리스크                     | 확률 | 영향도 | 대응방안                   |
| -------------------------- | ---- | ------ | -------------------------- |
| Google API 할당량 초과     | 15%  | Medium | 배치 업로드, API 키 다중화 |
| 라즈베리파이 하드웨어 오류 | 10%  | Medium | 예비 장비 준비             |

### 9.2 운영 리스크

- **정전**: UPS 장비 권장
- **네트워크 장애**: LTE 백업 연결 고려
- **데이터 손실**: 로컬 SQLite + USB 백업

---

## 10. 테스트 계획

### 10.1 단위 테스트

```python
# test_serial_communication.py
def test_rs485_connection():
    # RS-485 통신 연결 테스트
    assert serial_port.is_open == True

def test_data_parsing():
    # 데이터 파싱 정확성 테스트
    sample_data = "2025-07-01,09:11:11,2,0000000000,610789,PASS,52.8"
    parsed = parse_data(sample_data)
    assert len(parsed) == 7

```

### 10.2 통합 테스트

- **24시간 연속 운영 테스트**
- **네트워크 장애 시뮬레이션**
- **동시 다중 데이터 처리 테스트**
- **Google Sheets 대용량 데이터 업로드 테스트**

### 10.3 현장 테스트

- 실제 중량선별기와 연결 테스트
- 생산 환경에서 1주간 파일럿 운영
- 기존 USB 데이터와 정확성 비교

---

## 11. 운영 및 유지보수 계획

### 11.1 모니터링 체계

```python
# monitoring.py
def system_health_check():
    # CPU, 메모리, 디스크 사용률
    # 네트워크 연결 상태
    # 시리얼 통신 상태
    # Google API 응답 시간
    return status_report

```

### 11.2 로그 관리

- **시스템 로그**: `/var/log/checkweigher/`
- **데이터 로그**: 일별 로그 파일 생성
- **에러 로그**: 실시간 알림 (이메일/SMS)
- **로그 보관**: 90일 자동 삭제

### 11.3 백업 전략

- **실시간**: Google Sheets (Primary)
- **로컬**: SQLite Database (Secondary)
- **USB**: 주간 백업 (Tertiary)
- **클라우드**: Google Drive 월간 백업 (Archive)

### 11.4 업데이트 계획

- **월간**: 보안 패치 및 OS 업데이트
- **분기**: 기능 업데이트 및 성능 최적화
- **연간**: 하드웨어 점검 및 교체 검토

---

## 12. 성공 지표 및 KPI

### 12.1 핵심 성과 지표

- **데이터 전송 성공률**: 99.9% 이상
- **응답 시간**: 평균 3초 이내
- **시스템 가동률**: 99.5% 이상
- **데이터 정확도**: 100% (기존 USB 대비)

### 12.2 모니터링 대시보드

Google Sheets를 활용한 실시간 대시보드 구성:

- 실시간 데이터 현황
- 시간별/일별 통계
- 품질 판정 비율
- 시스템 상태 표시

---

## 13. 예산 및 ROI

### 13.1 초기 투자 비용

- **하드웨어**: 185,000원
- **개발 비용**: 2,000,000원 (외주 시)
- **설치 및 테스트**: 300,000원
- **총 초기 비용**: 2,485,000원

### 13.2 운영 비용 (월간)

- **전력 비용**: 5,000원
- **Google API**: 무료 (할당량 내)
- **인터넷**: 기존 네트워크 활용
- **총 월간 비용**: 5,000원

### 13.3 ROI 분석

- **인건비 절약**: 월 50만원 (수동 작업 제거)
- **회수 기간**: 5개월
- **연간 절약**: 600만원

---

## 14. 결론 및 다음 단계

### 14.1 프로젝트 성공 요인

1. **철저한 사전 테스트**: RS-485 통신 호환성 확인
2. **단계별 구현**: 위험 최소화를 위한 점진적 개발
3. **백업 체계**: 다중 백업을 통한 데이터 안전성 확보
4. **모니터링**: 실시간 시스템 상태 감시

### 14.2 즉시 시작 작업

1. **Week 1**: 하드웨어 주문 (라즈베리파이 키트)
2. **Week 2**: Google Cloud Console 계정 설정
3. **Week 3**: 개발 환경 구축 및 RS-485 연결 테스트
4. **Week 4**: 기본 통신 프로그램 개발

### 14.3 장기 확장 계획

- **다중 중량선별기 지원**: 공장 내 여러 장비 통합
- **AI 분석**: 품질 패턴 분석 및 예측
- **MES 연동**: 기존 생산관리시스템과 통합
- **모바일 앱**: 실시간 모니터링 앱 개발
